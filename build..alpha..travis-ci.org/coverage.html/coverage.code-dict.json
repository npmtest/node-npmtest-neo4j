{"/home/travis/build/npmtest/node-npmtest-neo4j/test.js":"/* istanbul instrument in package npmtest_neo4j */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-neo4j/lib.npmtest_neo4j.js":"/* istanbul instrument in package npmtest_neo4j */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_neo4j = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_neo4j = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-neo4j/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-neo4j && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_neo4j */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_neo4j\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_neo4j.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_neo4j.rollup.js'] =\n            local.assetsDict['/assets.npmtest_neo4j.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_neo4j.__dirname + '/lib.npmtest_neo4j.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-neo4j/node_modules/neo4j/lib-new/exports.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var $;\n\n  $ = require('underscore');\n\n  $(exports).extend({\n    GraphDatabase: require('./GraphDatabase'),\n    Node: require('./Node'),\n    Relationship: require('./Relationship'),\n    Transaction: require('./Transaction'),\n    Index: require('./Index'),\n    Constraint: require('./Constraint')\n  });\n\n  $(exports).extend(require('./errors'));\n\n}).call(this);\n\n//# sourceMappingURL=exports.js.map\n","/home/travis/build/npmtest/node-npmtest-neo4j/node_modules/neo4j/lib-new/GraphDatabase.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var $, Constraint, Error, GraphDatabase, Index, Node, Relationship, Request, Transaction, URL, assert, lib, _normalizeAuth, _transform,\n    __slice = [].slice;\n\n  $ = require('underscore');\n\n  assert = require('assert');\n\n  Constraint = require('./Constraint');\n\n  Error = require('./errors').Error;\n\n  Index = require('./Index');\n\n  lib = require('../package.json');\n\n  Node = require('./Node');\n\n  Relationship = require('./Relationship');\n\n  Request = require('request');\n\n  Transaction = require('./Transaction');\n\n  URL = require('url');\n\n  module.exports = GraphDatabase = (function() {\n    GraphDatabase.prototype.headers = {\n      'User-Agent': \"node-neo4j/\" + lib.version\n    };\n\n    function GraphDatabase(opts) {\n      var uri, _ref;\n      if (opts == null) {\n        opts = {};\n      }\n      if (typeof opts === 'string') {\n        opts = {\n          url: opts\n        };\n      }\n      this.url = opts.url, this.auth = opts.auth, this.headers = opts.headers, this.proxy = opts.proxy, this.agent = opts.agent;\n      if (!this.url) {\n        throw new TypeError('URL to Neo4j required');\n      }\n      uri = URL.parse(this.url);\n      if (uri.auth && (this.auth != null)) {\n        delete uri.auth;\n        this.url = URL.format(uri);\n      }\n      this.auth = _normalizeAuth((_ref = this.auth) != null ? _ref : uri.auth);\n      this.headers || (this.headers = {});\n      this.headers = $(this.headers).chain().clone().defaults(this.constructor.prototype.headers).value();\n    }\n\n    GraphDatabase.prototype.http = function(opts, cb) {\n      var body, headers, method, path, raw;\n      if (opts == null) {\n        opts = {};\n      }\n      if (typeof opts === 'string') {\n        opts = {\n          path: opts\n        };\n      }\n      method = opts.method, path = opts.path, headers = opts.headers, body = opts.body, raw = opts.raw;\n      if (!path) {\n        throw new TypeError('Path required');\n      }\n      method || (method = 'GET');\n      headers || (headers = {});\n      headers = $(headers).chain().clone().defaults(this.headers).extend({\n        'X-Stream': 'true'\n      }).value();\n      return Request({\n        method: method,\n        url: URL.resolve(this.url, path),\n        proxy: this.proxy,\n        auth: this.auth,\n        headers: headers,\n        agent: this.agent,\n        json: body != null ? body : true,\n        encoding: 'utf8',\n        gzip: true\n      }, cb && (function(_this) {\n        return function(err, resp) {\n          if (err) {\n            return cb(err);\n          }\n          if (raw) {\n            return cb(null, resp);\n          }\n          if (err = Error._fromResponse(resp)) {\n            return cb(err);\n          }\n          return cb(null, _transform(resp.body));\n        };\n      })(this));\n    };\n\n    GraphDatabase.prototype.checkPasswordChangeNeeded = function(cb) {\n      var _ref;\n      if (!((_ref = this.auth) != null ? _ref.username : void 0)) {\n        throw new TypeError('No `auth` specified in constructor!');\n      }\n      return this.http({\n        method: 'GET',\n        path: \"/user/\" + (encodeURIComponent(this.auth.username))\n      }, function(err, user) {\n        if (err) {\n          return cb(err);\n        }\n        return cb(null, user.password_change_required);\n      });\n    };\n\n    GraphDatabase.prototype.changePassword = function(opts, cb) {\n      var password, _ref;\n      if (opts == null) {\n        opts = {};\n      }\n      if (typeof opts === 'string') {\n        opts = {\n          password: opts\n        };\n      }\n      password = opts.password;\n      if (!((_ref = this.auth) != null ? _ref.username : void 0)) {\n        throw new TypeError('No `auth` specified in constructor!');\n      }\n      if (!password) {\n        throw new TypeError('Password required');\n      }\n      return this.http({\n        method: 'POST',\n        path: \"/user/\" + (encodeURIComponent(this.auth.username)) + \"/password\",\n        body: {\n          password: password\n        }\n      }, (function(_this) {\n        return function(err) {\n          if (err) {\n            return cb(err);\n          }\n          _this.auth.password = password;\n          return cb(null);\n        };\n      })(this));\n    };\n\n    GraphDatabase.prototype.cypher = function(opts, cb, _tx) {\n      var body, commit, format, formats, headers, lean, method, params, path, queries, query, rollback, single;\n      if (opts == null) {\n        opts = {};\n      }\n      if (typeof opts === 'string') {\n        opts = {\n          query: opts\n        };\n      }\n      if (opts instanceof Array) {\n        opts = {\n          queries: opts\n        };\n      }\n      queries = opts.queries, query = opts.query, params = opts.params, headers = opts.headers, lean = opts.lean, commit = opts.commit, rollback = opts.rollback;\n      if (!_tx && rollback) {\n        throw new Error('Illegal state: rolling back without a transaction!');\n      }\n      if (commit && rollback) {\n        throw new Error('Illegal state: both committing and rolling back!');\n      }\n      if (rollback && (query || queries)) {\n        throw new Error('Illegal state: rolling back with query/queries!');\n      }\n      if (!_tx && commit === false) {\n        throw new TypeError('Can’t refuse to commit without a transaction! To begin a new transaction without committing, call `db.beginTransaction()`, and then call `cypher` on that.');\n      }\n      if (!_tx && !(query || queries)) {\n        throw new TypeError('Query or queries required');\n      }\n      if (query && queries) {\n        throw new TypeError('Can’t supply both a single query and a batch of queries! Do you have a bug in your code?');\n      }\n      if (queries && params) {\n        throw new TypeError('When batching multiple queries, params must be supplied with each query, not globally.');\n      }\n      if (queries && lean) {\n        throw new TypeError('When batching multiple queries, `lean` must be specified with each query, not globally.');\n      }\n      if ((commit || rollback) && !(query || queries) && !_tx._id) {\n        cb(null, null);\n        return;\n      }\n      method = 'POST';\n      if (rollback) {\n        method = 'DELETE';\n      }\n      path = '/db/data/transaction';\n      if (_tx != null ? _tx._id : void 0) {\n        path += \"/\" + _tx._id;\n      }\n      if (commit || !_tx) {\n        path += '/commit';\n      }\n      if (query) {\n        queries = [\n          {\n            query: query,\n            params: params,\n            lean: lean\n          }\n        ];\n        single = true;\n      } else {\n        single = !queries;\n        queries || (queries = []);\n      }\n      formats = [];\n      body = {\n        statements: (function() {\n          var _i, _len, _ref, _results;\n          _results = [];\n          for (_i = 0, _len = queries.length; _i < _len; _i++) {\n            query = queries[_i];\n            if (typeof query === 'string') {\n              query = {\n                query: query\n              };\n            }\n            if (query.headers) {\n              throw new TypeError('When batching multiple queries, custom request headers cannot be supplied per query; they must be supplied globally.');\n            }\n            _ref = query, query = _ref.query, params = _ref.params, lean = _ref.lean;\n            formats.push(format = lean ? 'row' : 'rest');\n            _results.push({\n              statement: query,\n              parameters: params || {},\n              resultDataContents: [format]\n            });\n          }\n          return _results;\n        })()\n      };\n      return this.http({\n        method: method,\n        path: path,\n        headers: headers,\n        body: body,\n        raw: true\n      }, (function(_this) {\n        return function(err, resp) {\n          var columns, data, error, errors, i, result, results, _ref;\n          if (err) {\n            return cb(err);\n          }\n          if (err = Error._fromResponse(resp)) {\n            return cb(err);\n          }\n          if (_tx != null) {\n            _tx._updateFromResponse(resp);\n          }\n          _ref = resp.body, results = _ref.results, errors = _ref.errors;\n          results = (function() {\n            var _i, _len, _results;\n            _results = [];\n            for (i = _i = 0, _len = results.length; _i < _len; i = ++_i) {\n              result = results[i];\n              columns = result.columns, data = result.data;\n              format = formats[i];\n              _results.push($(data).pluck(format).map(function(row) {\n                var column, j, _j, _len1;\n                result = {};\n                for (j = _j = 0, _len1 = columns.length; _j < _len1; j = ++_j) {\n                  column = columns[j];\n                  result[column] = row[j];\n                }\n                if (format === 'rest') {\n                  result = _transform(result);\n                }\n                return result;\n              }));\n            }\n            return _results;\n          })();\n          if (single) {\n            if (queries.length) {\n              assert.equal(queries.length, 1, 'There should be *exactly* one query given.');\n              assert(results.length <= 1, 'There should be *at most* one set of results.');\n              results = results[0];\n            } else {\n              assert.equal(results.length, 0, 'There should be *no* results.');\n              results = null;\n            }\n          }\n          if (errors.length) {\n            error = errors[0];\n            err = Error._fromObject(error);\n          }\n          return cb(err, results);\n        };\n      })(this));\n    };\n\n    GraphDatabase.prototype.beginTransaction = function() {\n      return new Transaction(this);\n    };\n\n    GraphDatabase.prototype.getLabels = function(cb) {\n      return this.http({\n        method: 'GET',\n        path: '/db/data/labels'\n      }, cb);\n    };\n\n    GraphDatabase.prototype.getPropertyKeys = function(cb) {\n      return this.http({\n        method: 'GET',\n        path: '/db/data/propertykeys'\n      }, cb);\n    };\n\n    GraphDatabase.prototype.getRelationshipTypes = function(cb) {\n      return this.http({\n        method: 'GET',\n        path: '/db/data/relationship/types'\n      }, cb);\n    };\n\n    GraphDatabase.prototype.getIndexes = function(opts, cb) {\n      var label, path;\n      if (opts == null) {\n        opts = {};\n      }\n      if (typeof opts === 'function') {\n        cb = opts;\n        opts = {};\n      }\n      if (typeof opts === 'string') {\n        opts = {\n          label: opts\n        };\n      }\n      label = opts.label;\n      path = '/db/data/schema/index';\n      if (label) {\n        path += \"/\" + (encodeURIComponent(label));\n      }\n      return this.http({\n        method: 'GET',\n        path: path\n      }, function(err, indexes) {\n        return cb(err, indexes != null ? indexes.map(Index._fromRaw) : void 0);\n      });\n    };\n\n    GraphDatabase.prototype.hasIndex = function(opts, cb) {\n      var label, property;\n      if (opts == null) {\n        opts = {};\n      }\n      label = opts.label, property = opts.property;\n      if (!(label && property)) {\n        throw new TypeError('Label and property required to query whether an index exists.');\n      }\n      return this.getIndexes({\n        label: label\n      }, function(err, indexes) {\n        return cb(err, indexes != null ? indexes.some(function(index) {\n          return index.label === label && index.property === property;\n        }) : void 0);\n      });\n    };\n\n    GraphDatabase.prototype.createIndex = function(opts, cb) {\n      var label, property;\n      if (opts == null) {\n        opts = {};\n      }\n      label = opts.label, property = opts.property;\n      if (!(label && property)) {\n        throw new TypeError('Label and property required to create an index.');\n      }\n      return this.http({\n        method: 'POST',\n        path: \"/db/data/schema/index/\" + (encodeURIComponent(label)),\n        body: {\n          'property_keys': [property]\n        },\n        raw: true\n      }, function(err, resp) {\n        if (err) {\n          return cb(err);\n        }\n        if (resp.statusCode === 409) {\n          return cb(null, null);\n        }\n        if (err = Error._fromResponse(resp)) {\n          return cb(err);\n        }\n        return cb(err, resp.body ? Index._fromRaw(resp.body) : void 0);\n      });\n    };\n\n    GraphDatabase.prototype.dropIndex = function(opts, cb) {\n      var label, property;\n      if (opts == null) {\n        opts = {};\n      }\n      label = opts.label, property = opts.property;\n      if (!(label && property)) {\n        throw new TypeError('Label and property required to drop an index.');\n      }\n      return this.http({\n        method: 'DELETE',\n        path: \"/db/data/schema/index/\" + (encodeURIComponent(label)) + \"/\" + (encodeURIComponent(property)),\n        raw: true\n      }, function(err, resp) {\n        if (err) {\n          return cb(err);\n        }\n        if (resp.statusCode === 404) {\n          return cb(null, false);\n        }\n        if (err = Error._fromResponse(resp)) {\n          return cb(err);\n        }\n        return cb(err, true);\n      });\n    };\n\n    GraphDatabase.prototype.getConstraints = function(opts, cb) {\n      var label, path;\n      if (opts == null) {\n        opts = {};\n      }\n      if (typeof opts === 'function') {\n        cb = opts;\n        opts = {};\n      }\n      if (typeof opts === 'string') {\n        opts = {\n          label: opts\n        };\n      }\n      label = opts.label;\n      path = '/db/data/schema/constraint';\n      if (label) {\n        path += \"/\" + (encodeURIComponent(label));\n      }\n      return this.http({\n        method: 'GET',\n        path: path\n      }, function(err, constraints) {\n        return cb(err, constraints != null ? constraints.map(Constraint._fromRaw) : void 0);\n      });\n    };\n\n    GraphDatabase.prototype.hasConstraint = function(opts, cb) {\n      var label, property;\n      if (opts == null) {\n        opts = {};\n      }\n      label = opts.label, property = opts.property;\n      if (!(label && property)) {\n        throw new TypeError('Label and property required to query whether a constraint exists.');\n      }\n      return this.http({\n        method: 'GET',\n        path: \"/db/data/schema/constraint/\" + (encodeURIComponent(label)) + \"/uniqueness\"\n      }, function(err, constraints) {\n        if (err) {\n          return cb(err);\n        } else {\n          return cb(null, constraints.some(function(constraint) {\n            constraint = Constraint._fromRaw(constraint);\n            return constraint.label === label && constraint.property === property;\n          }));\n        }\n      });\n    };\n\n    GraphDatabase.prototype.createConstraint = function(opts, cb) {\n      var label, property;\n      if (opts == null) {\n        opts = {};\n      }\n      label = opts.label, property = opts.property;\n      if (!(label && property)) {\n        throw new TypeError('Label and property required to create a constraint.');\n      }\n      return this.http({\n        method: 'POST',\n        path: \"/db/data/schema/constraint/\" + (encodeURIComponent(label)) + \"/uniqueness\",\n        body: {\n          'property_keys': [property]\n        },\n        raw: true\n      }, function(err, resp) {\n        if (err) {\n          return cb(err);\n        }\n        if (resp.statusCode === 409) {\n          return cb(null, null);\n        }\n        if (err = Error._fromResponse(resp)) {\n          return cb(err);\n        }\n        return cb(err, resp.body ? Constraint._fromRaw(resp.body) : void 0);\n      });\n    };\n\n    GraphDatabase.prototype.dropConstraint = function(opts, cb) {\n      var label, property;\n      if (opts == null) {\n        opts = {};\n      }\n      label = opts.label, property = opts.property;\n      if (!(label && property)) {\n        throw new TypeError('Label and property required to drop a constraint.');\n      }\n      return this.http({\n        method: 'DELETE',\n        path: \"/db/data/schema/constraint/\" + (encodeURIComponent(label)) + \"/uniqueness/\" + (encodeURIComponent(property)),\n        raw: true\n      }, function(err, resp) {\n        if (err) {\n          return cb(err);\n        }\n        if (resp.statusCode === 404) {\n          return cb(null, false);\n        }\n        if (err = Error._fromResponse(resp)) {\n          return cb(err);\n        }\n        return cb(err, true);\n      });\n    };\n\n    return GraphDatabase;\n\n  })();\n\n  _normalizeAuth = function(auth) {\n    var password, passwordParts, username, _ref;\n    if (!auth) {\n      return null;\n    }\n    if (typeof auth === 'string') {\n      _ref = auth.split(':'), username = _ref[0], passwordParts = 2 <= _ref.length ? __slice.call(_ref, 1) : [];\n      password = passwordParts.join(':');\n      auth = {\n        username: username,\n        password: password\n      };\n    }\n    if ((Object.keys(auth)).length === 0) {\n      return null;\n    }\n    return auth;\n  };\n\n  _transform = function(obj) {\n    var key, map, node, rel, val;\n    if ((!obj) || (typeof obj !== 'object')) {\n      return obj;\n    }\n    if (obj instanceof Array) {\n      return obj.map(_transform);\n    }\n    if (rel = Relationship._fromRaw(obj)) {\n      return rel;\n    }\n    if (node = Node._fromRaw(obj)) {\n      return node;\n    }\n    map = {};\n    for (key in obj) {\n      val = obj[key];\n      map[key] = _transform(val);\n    }\n    return map;\n  };\n\n}).call(this);\n\n//# sourceMappingURL=GraphDatabase.js.map\n","/home/travis/build/npmtest/node-npmtest-neo4j/node_modules/neo4j/lib-new/Constraint.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var Constraint, lib;\n\n  lib = require('../package.json');\n\n  module.exports = Constraint = (function() {\n    function Constraint(opts) {\n      if (opts == null) {\n        opts = {};\n      }\n      this.label = opts.label, this.property = opts.property;\n    }\n\n    Constraint.prototype.equals = function(other) {\n      return (other instanceof Constraint) && (this.label === other.label) && (this.property === other.property);\n    };\n\n    Constraint.prototype.toString = function() {\n      var node;\n      node = this.label.toLowerCase();\n      return \"CONSTRAINT ON (\" + node + \":\" + this.label + \") ASSERT \" + node + \".\" + this.property + \" IS UNIQUE\";\n    };\n\n    Constraint._fromRaw = function(obj) {\n      var label, property, property_keys, type;\n      type = obj.type, label = obj.label, property_keys = obj.property_keys;\n      if (type !== 'UNIQUENESS') {\n        console.warn(\"Unrecognized constraint type encountered: \" + type + \". node-neo4j v\" + lib.version + \" doesn’t know how to handle these. Continuing as if it’s a UNIQUENESS constraint...\");\n      }\n      if (property_keys.length > 1) {\n        console.warn(\"Constraint (on :\" + label + \") with \" + property_keys.length + \" property keys encountered: \" + (property_keys.join(', ')) + \". node-neo4j v\" + lib.version + \" doesn’t know how to handle these. Continuing with only the first one.\");\n      }\n      property = property_keys[0];\n      return new Constraint({\n        label: label,\n        property: property\n      });\n    };\n\n    return Constraint;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=Constraint.js.map\n","/home/travis/build/npmtest/node-npmtest-neo4j/node_modules/neo4j/lib-new/errors.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var $, assert, http,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  $ = require('underscore');\n\n  assert = require('assert');\n\n  http = require('http');\n\n  this.Error = (function(_super) {\n    __extends(Error, _super);\n\n    function Error(message, neo4j) {\n      this.message = message != null ? message : 'Unknown error';\n      this.neo4j = neo4j != null ? neo4j : {};\n      this.name = 'neo4j.' + this.constructor.name;\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    Error._fromResponse = function(resp) {\n      var ErrorClass, ErrorType, body, error, headers, logBody, message, reqText, statusCode, statusText, _ref;\n      body = resp.body, headers = resp.headers, statusCode = resp.statusCode;\n      if (statusCode < 400) {\n        return null;\n      }\n      if (body != null ? (_ref = body.errors) != null ? _ref.length : void 0 : void 0) {\n        error = body.errors[0];\n        return this._fromObject(error);\n      }\n      ErrorType = statusCode >= 500 ? 'Database' : 'Client';\n      ErrorClass = exports[\"\" + ErrorType + \"Error\"];\n      message = \"\" + statusCode + \" \";\n      logBody = statusCode >= 500;\n      if (body != null ? body.exception : void 0) {\n        message += \"[\" + body.exception + \"] \" + (body.message || '(no message)');\n      } else {\n        statusText = http.STATUS_CODES[statusCode];\n        reqText = \"\" + resp.req.method + \" \" + resp.req.path;\n        message += \"\" + statusText + \" response for \" + reqText;\n        logBody = true;\n      }\n      if (logBody && (body != null)) {\n        message += \": \" + (JSON.stringify(body, null, 4));\n      }\n      return new ErrorClass(message, body);\n    };\n\n    Error._fromObject = function(obj) {\n      var ErrorClass, category, classification, code, fullMessage, message, neo, stackTrace, title, _ref;\n      if ((obj.stacktrace != null) && (obj.stackTrace == null)) {\n        obj.stackTrace = obj.stacktrace;\n        delete obj.stacktrace;\n      }\n      code = obj.code, message = obj.message, stackTrace = obj.stackTrace;\n      _ref = code.split('.'), neo = _ref[0], classification = _ref[1], category = _ref[2], title = _ref[3];\n      ErrorClass = exports[classification];\n      fullMessage = \"[\" + code + \"] \";\n      if (stackTrace && (classification === 'DatabaseError' || !message)) {\n        if (message && (stackTrace.indexOf(message)) === -1) {\n          stackTrace = \"\" + message + \": \" + stackTrace;\n        }\n        stackTrace = stackTrace.replace(/\\t/g, '    ').replace(/\\n/g, '\\n    ');\n        fullMessage += stackTrace;\n      } else {\n        fullMessage += message;\n      }\n      return new ErrorClass(fullMessage, obj);\n    };\n\n    return Error;\n\n  })(Error);\n\n  this.ClientError = (function(_super) {\n    __extends(ClientError, _super);\n\n    function ClientError() {\n      return ClientError.__super__.constructor.apply(this, arguments);\n    }\n\n    return ClientError;\n\n  })(this.Error);\n\n  this.DatabaseError = (function(_super) {\n    __extends(DatabaseError, _super);\n\n    function DatabaseError() {\n      return DatabaseError.__super__.constructor.apply(this, arguments);\n    }\n\n    return DatabaseError;\n\n  })(this.Error);\n\n  this.TransientError = (function(_super) {\n    __extends(TransientError, _super);\n\n    function TransientError() {\n      return TransientError.__super__.constructor.apply(this, arguments);\n    }\n\n    return TransientError;\n\n  })(this.Error);\n\n}).call(this);\n\n//# sourceMappingURL=errors.js.map\n","/home/travis/build/npmtest/node-npmtest-neo4j/node_modules/neo4j/lib-new/Index.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var Index;\n\n  module.exports = Index = (function() {\n    function Index(opts) {\n      if (opts == null) {\n        opts = {};\n      }\n      this.label = opts.label, this.property = opts.property;\n    }\n\n    Index.prototype.equals = function(other) {\n      return (other instanceof Index) && (this.label === other.label) && (this.property === other.property);\n    };\n\n    Index.prototype.toString = function() {\n      return \"INDEX ON :\" + this.label + \"(\" + this.property + \")\";\n    };\n\n    Index._fromRaw = function(obj) {\n      var label, property, property_keys;\n      label = obj.label, property_keys = obj.property_keys;\n      if (property_keys.length > 1) {\n        console.warn(\"Index (on :\" + label + \") with \" + property_keys.length + \" property keys encountered: \" + (property_keys.join(', ')) + \". node-neo4j v\" + lib.version + \" doesn’t know how to handle these. Continuing with only the first one.\");\n      }\n      property = property_keys[0];\n      return new Index({\n        label: label,\n        property: property\n      });\n    };\n\n    return Index;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=Index.js.map\n","/home/travis/build/npmtest/node-npmtest-neo4j/node_modules/neo4j/lib-new/Node.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var Node, utils;\n\n  utils = require('./utils');\n\n  module.exports = Node = (function() {\n    function Node(opts) {\n      if (opts == null) {\n        opts = {};\n      }\n      this._id = opts._id, this.labels = opts.labels, this.properties = opts.properties;\n    }\n\n    Node.prototype.equals = function(other) {\n      return (other instanceof Node) && (this._id === other._id);\n    };\n\n    Node.prototype.toString = function() {\n      var labels;\n      labels = this.labels.map(function(label) {\n        return \":\" + label;\n      });\n      return \"(\" + this._id + (labels.join('')) + \")\";\n    };\n\n    Node._fromRaw = function(obj) {\n      var data, id, labels, metadata, self;\n      if ((!obj) || (typeof obj !== 'object')) {\n        return null;\n      }\n      data = obj.data, metadata = obj.metadata, self = obj.self;\n      if ((!self) || (typeof self !== 'string') || (!data) || (typeof data !== 'object')) {\n        return null;\n      }\n      if (metadata) {\n        id = metadata.id, labels = metadata.labels;\n      } else {\n        id = utils.parseId(self);\n        labels = null;\n        if (!this._warnedMetadata) {\n          this._warnedMetadata = true;\n          console.warn('It looks like you’re running Neo4j <2.1.5. Neo4j <2.1.5 didn’t return label metadata to drivers, so node-neo4j has no way to associate nodes with labels. Thus, the `labels` property on node-neo4j `Node` instances will always be null for you. Consider upgrading to fix. =) http://neo4j.com/release-notes/neo4j-2-1-5/');\n        }\n      }\n      return new Node({\n        _id: id,\n        labels: labels,\n        properties: data\n      });\n    };\n\n    return Node;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=Node.js.map\n","/home/travis/build/npmtest/node-npmtest-neo4j/node_modules/neo4j/lib-new/utils.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  this.parseId = function(url) {\n    var match;\n    match = url.match(/(?:commit|\\/)db\\/data\\/\\w+\\/(\\d+)($|\\/)/);\n    if (!match) {\n      return null;\n    }\n    return parseInt(match[1], 10);\n  };\n\n}).call(this);\n\n//# sourceMappingURL=utils.js.map\n","/home/travis/build/npmtest/node-npmtest-neo4j/node_modules/neo4j/lib-new/Relationship.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var Relationship, utils;\n\n  utils = require('./utils');\n\n  module.exports = Relationship = (function() {\n    function Relationship(opts) {\n      if (opts == null) {\n        opts = {};\n      }\n      this._id = opts._id, this.type = opts.type, this.properties = opts.properties, this._fromId = opts._fromId, this._toId = opts._toId;\n    }\n\n    Relationship.prototype.equals = function(other) {\n      return (other instanceof Relationship) && (this._id === other._id);\n    };\n\n    Relationship.prototype.toString = function() {\n      return \"-[\" + this._id + \":\" + this.type + \"]-\";\n    };\n\n    Relationship._fromRaw = function(obj) {\n      var data, end, fromId, id, self, start, toId, type;\n      if ((!obj) || (typeof obj !== 'object')) {\n        return null;\n      }\n      data = obj.data, self = obj.self, type = obj.type, start = obj.start, end = obj.end;\n      if ((!self) || (typeof self !== 'string') || (!type) || (typeof type !== 'string') || (!start) || (typeof start !== 'string') || (!end) || (typeof end !== 'string') || (!data) || (typeof data !== 'object')) {\n        return null;\n      }\n      id = utils.parseId(self);\n      fromId = utils.parseId(start);\n      toId = utils.parseId(end);\n      return new Relationship({\n        _id: id,\n        type: type,\n        properties: data,\n        _fromId: fromId,\n        _toId: toId\n      });\n    };\n\n    return Relationship;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=Relationship.js.map\n","/home/travis/build/npmtest/node-npmtest-neo4j/node_modules/neo4j/lib-new/Transaction.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var FAR_FUTURE_MS, Transaction, errors, utils;\n\n  errors = require('./errors');\n\n  utils = require('./utils');\n\n  FAR_FUTURE_MS = Date.now() + 1000 * 60 * 60 * 24 * 365;\n\n  module.exports = Transaction = (function() {\n    var get;\n\n    function Transaction(_db) {\n      this._db = _db;\n      this._id = null;\n      this._expires = null;\n      this._pending = false;\n      this._committed = false;\n      this._rolledBack = false;\n    }\n\n    get = function(props) {\n      var getter, name, _results;\n      _results = [];\n      for (name in props) {\n        getter = props[name];\n        _results.push(Object.defineProperty(Transaction.prototype, name, {\n          configurable: true,\n          enumerable: true,\n          get: getter\n        }));\n      }\n      return _results;\n    };\n\n    get({\n      STATE_OPEN: function() {\n        return 'open';\n      }\n    });\n\n    get({\n      STATE_PENDING: function() {\n        return 'pending';\n      }\n    });\n\n    get({\n      STATE_COMMITTED: function() {\n        return 'committed';\n      }\n    });\n\n    get({\n      STATE_ROLLED_BACK: function() {\n        return 'rolled back';\n      }\n    });\n\n    get({\n      STATE_EXPIRED: function() {\n        return 'expired';\n      }\n    });\n\n    get({\n      expiresAt: function() {\n        if (this._expires) {\n          return new Date(this._expires);\n        } else {\n          return new Date(FAR_FUTURE_MS);\n        }\n      }\n    });\n\n    get({\n      expiresIn: function() {\n        if (this._expires) {\n          return this.expiresAt - (new Date);\n        } else {\n          return Infinity;\n        }\n      }\n    });\n\n    get({\n      state: function() {\n        switch (false) {\n          case !this._pending:\n            return this.STATE_PENDING;\n          case !this._committed:\n            return this.STATE_COMMITTED;\n          case !this._rolledBack:\n            return this.STATE_ROLLED_BACK;\n          case !(this.expiresIn <= 0):\n            return this.STATE_EXPIRED;\n          default:\n            return this.STATE_OPEN;\n        }\n      }\n    });\n\n    Transaction.prototype.cypher = function(opts, cb) {\n      var errMsg;\n      if (opts == null) {\n        opts = {};\n      }\n      errMsg = (function() {\n        switch (this.state) {\n          case this.STATE_PENDING:\n            return 'A request within this transaction is currently in progress. Concurrent requests within a transaction are not allowed.';\n          case this.STATE_EXPIRED:\n            return 'This transaction has expired. You can get the expiration time of a transaction through its `expiresAt` (Date) and `expiresIn` (ms) properties. To prevent a transaction from expiring, execute any action or call `renew` before the transaction expires.';\n          case this.STATE_COMMITTED:\n            return 'This transaction has been committed. Transactions cannot be reused; begin a new one instead.';\n          case this.STATE_ROLLED_BACK:\n            return 'This transaction has been rolled back. Transactions get automatically rolled back on any DatabaseErrors, as well as any errors during a commit. That includes auto-commit queries (`{commit: true}`). Transactions cannot be reused; begin a new one instead.';\n        }\n      }).call(this);\n      if (errMsg) {\n        throw new errors.ClientError(errMsg);\n      }\n      this._pending = true;\n      return this._db.cypher(opts, (function(_this) {\n        return function(err, results) {\n          _this._pending = false;\n          if (_this._id) {\n            return cb(err, results);\n          }\n          if (opts.commit && !err) {\n            _this._committed = true;\n          } else {\n            _this._rolledBack = true;\n          }\n          return cb(err, results);\n        };\n      })(this), this);\n    };\n\n    Transaction.prototype.commit = function(cb) {\n      return this.cypher({\n        commit: true\n      }, cb);\n    };\n\n    Transaction.prototype.rollback = function(cb) {\n      return this.cypher({\n        rollback: true\n      }, cb);\n    };\n\n    Transaction.prototype.renew = function(cb) {\n      return this.cypher({}, cb);\n    };\n\n    Transaction.prototype._updateFromResponse = function(resp) {\n      var body, headers, statusCode, transaction, transactionURL;\n      if (!resp) {\n        throw new Error('Unexpected: no transactional response!');\n      }\n      body = resp.body, headers = resp.headers, statusCode = resp.statusCode;\n      transaction = body.transaction;\n      if (!transaction) {\n        this._id = this._expires = null;\n        return;\n      }\n      this._expires = new Date(transaction.expires);\n      if (this._id) {\n        return;\n      }\n      if (statusCode !== 201) {\n        throw new Error('Unexpected: transaction returned by Neo4j, but it was never 201 Created, so we have no ID!');\n      }\n      if (!(transactionURL = headers['location'])) {\n        throw new Error('Unexpected: transaction response is 201 Created, but with no Location header!');\n      }\n      return this._id = utils.parseId(transactionURL);\n    };\n\n    return Transaction;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=Transaction.js.map\n"}